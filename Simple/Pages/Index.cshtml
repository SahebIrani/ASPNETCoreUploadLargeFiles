@page
@attribute [RequestSizeLimitAttribute(52428800)]
@model IndexModel
@{
    ViewData["Title"] = "Upload Files Sample";
}

<h1>Files in the database</h1>

@if (Model.DatabaseFiles.Count == 0)
{
    <p>
        No files are available. Visit one of the file upload scenario pages to upload one or more files.
    </p>
}
else
{
    <table>
        <thead>
            <tr>
                <th></th>
                <th>
                    @Html.DisplayNameFor(model => model.DatabaseFiles[0].UntrustedName) /
                    @Html.DisplayNameFor(model => model.DatabaseFiles[0].Note)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DatabaseFiles[0].UploadDT)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.DatabaseFiles[0].Size)
                </th>
                <th>
                    <code>FileStreamResult</code> from database
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in Model.DatabaseFiles)
            {
                <tr>
                    <td>
                        <a asp-page="./DeleteDbFile" asp-route-id="@file.Id">Delete</a>
                    </td>
                    <td>
                        <b>@file.UntrustedName</b><br>
                        @Html.DisplayFor(modelItem => file.Note)
                    </td>
                    <td class="text-center">
                        @Html.DisplayFor(modelItem => file.UploadDT)
                    </td>
                    <td class="text-center">
                        @Html.DisplayFor(modelItem => file.Size)
                    </td>
                    <td class="text-center">
                        <a asp-page-handler="DownloadDb" asp-route-id="@file.Id">Download</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h1>Files stored on disk</h1>

@if (Model.PhysicalFiles.Count() == 0)
{
    <p>
        No files are available. Visit one of the file upload scenario pages to upload one or more files.
    </p>
}
else
{
    <table>
        <thead>
            <tr>
                <th></th>
                <th>
                    Name / Path
                </th>
                <th>
                    Size (bytes)
                </th>
                <th>
                    <code>PhysicalFileResult</code> from storage
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in Model.PhysicalFiles)
            {
                <tr>
                    <td>
                        <a asp-page="./DeletePhysicalFile" asp-route-fileName="@file.Name">Delete</a>
                    </td>
                    <td>
                        <b>@file.Name</b><br>
                        @file.PhysicalPath
                    </td>
                    <td class="text-center">
                        @file.Length.ToString("N0")
                    </td>
                    <td class="text-center">
                        <a asp-page-handler="DownloadPhysical" asp-route-fileName="@file.Name">Download</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
}


<form method="post" enctype="multipart/form-data">
    <input type="file" name="file" />
    <br /><br />
    <button type="submit">Upload File</button>
</form>

<hr />

<form enctype="multipart/form-data" method="post">
    <dl>
        <dt>
            <label asp-for="FileUpload.FormFile"></label>
        </dt>
        <dd>
            <input asp-for="FileUpload.FormFile" type="file">
            <span asp-validation-for="FileUpload.FormFile"></span>
        </dd>
    </dl>
    <input asp-page-handler="Upload" class="btn" type="submit" value="Upload" />
</form>



<form action="BufferedSingleFileUploadPhysical/?handler=Upload"
      enctype="multipart/form-data" onsubmit="AJAXSubmit(this);return false;"
      method="post">
    <dl>
        <dt>
            <label for="FileUpload_FormFile">File</label>
        </dt>
        <dd>
            <input id="FileUpload_FormFile" type="file"
                   name="FileUpload.FormFile" />
        </dd>
    </dl>

    <input class="btn" type="submit" value="Upload" />

    <div style="margin-top:15px">
        <output name="result"></output>
    </div>
</form>

@*To perform the form POST in JavaScript for clients that don't support the Fetch API, use one of the following approaches:*@
<script>
    async function AJAXSubmit(oFormElement) {
        var resultElement = oFormElement.elements.namedItem("result");
        const formData = new FormData(oFormElement);
        try {

            const response = await fetch(oFormElement.action, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                window.location.href = '/';
            }

            resultElement.value = 'Result: ' + response.status + ' ' + response.statusText;
        }
        catch (error) {
            console.error('Error:', error);
        }
    }
</script>

<script>
    "use strict";

    function AJAXSubmit(oFormElement) {
        var oReq = new XMLHttpRequest();
        oReq.onload = function (e) {
            oFormElement.elements.namedItem("result").value =
                'Result: ' + this.status + ' ' + this.statusText;
        };
        oReq.open("post", oFormElement.action);
        oReq.send(new FormData(oFormElement));
    }
</script>


<script>
    var adminManager = new ActiveXObject('Microsoft.ApplicationHost.WritableAdminManager');
    adminManager.CommitPath = "MACHINE/WEBROOT/APPHOST/Default Web Site";
    var requestFilteringSection = adminManager.GetAdminSection("system.webServer/security/requestFiltering", "MACHINE/WEBROOT/APPHOST/Default Web Site");

    var requestLimitsElement = requestFilteringSection.ChildElements.Item("requestLimits");
    var headerLimitsCollection = requestLimitsElement.ChildElements.Item("headerLimits").Collection;

    var addElement = headerLimitsCollection.CreateNewElement("add");
    addElement.Properties.Item("header").Value = "Content-type";
    addElement.Properties.Item("sizeLimit").Value = 100;
    headerLimitsCollection.AddElement(addElement);

    adminManager.CommitChanges();
</script>